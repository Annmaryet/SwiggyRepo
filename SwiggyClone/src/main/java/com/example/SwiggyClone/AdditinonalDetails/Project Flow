Project Workflow ⚙️

This is the logical flow of how a user interacts with the application and how the different services you built work together to make it happen.

1. Authentication & Setup
Action: A new user registers.

Backend Flow:

The request hits UserController.

UserServiceImpl is called. It hashes the password, assigns the default "ROLE_USER", and saves the new User to the database.

A corresponding empty Cart is automatically created and linked to the user.

2. Browsing & Adding to Cart
Action: The user browses restaurants and adds a food item to their cart.

Backend Flow:

RestaurantController provides a list of Restaurant entities and their associated FoodItems.

When an item is added, CartController is called.

CartServiceImpl finds the user's Cart, creates a new CartItem (or updates the quantity if it already exists), and links it to the selected FoodItem.

3. Placing an Order
Action: The user reviews their cart and clicks "Place Order".

Backend Flow:

The request hits OrderController with the userId.

OrderServiceImpl orchestrates the checkout process:

It calls CartService to get all CartItems for the user.

It creates a new Order entity, linking it to the User and calculating the totalAmount.

It converts each CartItem into a new OrderItem and links them to the new Order.

It saves the Order and all its OrderItems in a single transaction.

Finally, it calls CartService again to clear all CartItems from the user's Cart.

4. Processing Payment
Action: The user is redirected to the payment screen and submits their payment details.

Backend Flow:

PaymentController receives the orderId and payment method.

PaymentServiceImpl takes over:

It fetches the Order from the database to get the trusted totalAmount.

It creates a Payment record, links it to the Order, and sets the status to "SUCCESS".

It updates the Order status from "PLACED" to "PAID".

5. Sending Notifications
Action: The system automatically informs the user about their order progress.

Backend Flow:

The NotificationServiceImpl is called by other services at key moments:

After OrderService successfully creates an order, it calls notificationService.sendOrderConfirmation(...).

After PaymentService successfully processes a payment, it calls notificationService.sendOrderStatusUpdate(...) with the "PAID" status.

The service creates a Notification entity with a formatted message and saves it for the user.